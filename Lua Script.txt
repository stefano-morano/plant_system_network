LOG_TAG = "SN_TEST_R"

--function that return a rounded float until the second decimal
function Round(num)
    local mult = 10^2
    return math.floor(num * mult + 0.5)/mult
end

--function to send value to the node and check errors
local function SetNodeValue(tag, value)
	local worked, err = resiot_setnodevalue(appeui, deveui, tag, tostring(value))
    if (not worked) then
    	resiot_debug(string.format("Error setting %s: %s
", tag, err))
    end
end


function parsePayload(appeui,deveui,payload)
  	
  	--decode payload form hex
	local Payload = resiot_hexdecode(payload)
  
  	if #Payload < 30 then
        resiot_debug("Payload too short: " .. #Payload .. " bytes")
        return
    end
  
  	--define tags
  	local light_tag = "Light"
  	local moisture_tag = "Moisture"
  	local ax_tag = "Ax"
  	local ay_tag = "Ay"
  	local az_tag = "Az"
  	local red_tag = "Red"
  	local green_tag = "Green"
  	local blue_tag = "Blue"
  	local clear_tag = "Clear"
  	local temperature_tag = "Temperature"
  	local humidity_tag = "Humidity"
  	local latitude_tag = "Latitude"
  	local longitude_tag = "Longitude"
  	local altitude_tag = "Altitude"
  	local accelleration_tag = "Accelleration"

  
  	--storing data in different byte arrays
  	local light_byteArray = {Payload[1], 0}  --light  
	local moisture_byteArray = {Payload[2], 0}  --moisture
    local accelleration_byteArray = {Payload[3], 0}  --accelleration
  	local humidity_byteArray = {Payload[4], 0}  --humidity
	local ax_byteArray = {Payload[5],Payload[6]}  --x axis
	local ay_byteArray = {Payload[7],Payload[8]}  --y axis 
	local az_byteArray = {Payload[9],Payload[10]}  --z axis
  	local red_byteArray = {Payload[11],Payload[12]}  --red
  	local green_byteArray = {Payload[13],Payload[14]}  --blue
  	local blue_byteArray = {Payload[15],Payload[16]}  --green
  	local clear_byteArray = {Payload[17],Payload[18]}  --clear
  	local temperature_byteArray = {Payload[19], Payload[20]}	--temperature
  	local altitude_byteArray = {Payload[21], Payload[22]}  --altitude
  	local latitude_byteArray = {Payload[23],Payload[24],Payload[25],Payload[26]}  --latitude
  	local longitude_byteArray = {Payload[27],Payload[28],Payload[29],Payload[30]}  --longitude
  
  	--converting byte to int
  	local light = resiot_ba2intLE16(light_byteArray)
  	local moisture = resiot_ba2intLE16(moisture_byteArray)
  	local altitude = resiot_ba2intLE16(altitude_byteArray)
  	local temp = Round(((175.72 * resiot_ba2intLE16(temperature_byteArray)) / 65536) - 46.85);
  	local hum = resiot_ba2intLE16(humidity_byteArray)
  	local acc = resiot_ba2intLE16(accelleration_byteArray)
  
  	--converting byte array to int
  	local ax = Round((resiot_ba2intLE16(ax_byteArray)/100) - 200)
  	local ay = Round((resiot_ba2intLE16(ay_byteArray)/100) - 200)
  	local az = Round((resiot_ba2intLE16(az_byteArray)/100) - 200)
  	local red = resiot_ba2intLE16(red_byteArray)
  	local green = resiot_ba2intLE16(green_byteArray)
  	local blue = resiot_ba2intLE16(blue_byteArray)
  	local clear = resiot_ba2intLE16(clear_byteArray)
  	
  	--converting byte array to floats
  	local lat = resiot_ba2float32LE(latitude_byteArray)
  	local long = resiot_ba2float32LE(longitude_byteArray)
  	
    
    --debug all the values
  	resiot_debug(string.format("%s
", LOG_TAG)) 
  	resiot_debug(string.format("ANALOG SENSORS: Light: %d, Moisture: %d
", light, moisture)) 
  	resiot_debug(string.format("ACCELLEROMETER: X: %f, Y: %f, Z: %f, Total Accelleration: %d
", ax, ay, az, acc))
  	resiot_debug(string.format("COLOR SENSOR: Red: %d, Green: %d, Blue: %d, Clear: %d
", red, green, blue, clear))
  	resiot_debug(string.format("I2C SENSORS: Temp: %f, Hum: %d
", temp, hum))
  	resiot_debug(string.format("GPS: Latitude: %f, Longitude: %f, Altitude: %d
", lat, long, altitude))
    
  	--setting all the values node
  	SetNodeValue(light_tag, light)
  	SetNodeValue(moisture_tag, moisture)
  	SetNodeValue(ax_tag, ax)
  	SetNodeValue(ay_tag, ay)
  	SetNodeValue(az_tag, az)
  	SetNodeValue(red_tag, red)
  	SetNodeValue(green_tag, green)
  	SetNodeValue(blue_tag, blue)
  	SetNodeValue(clear_tag, clear)
  	SetNodeValue(temperature_tag, temp)
  	SetNodeValue(humidity_tag, hum)
  	SetNodeValue(latitude_tag, lat)
  	SetNodeValue(longitude_tag, long)
  	SetNodeValue(altitude_tag, altitude)
  	SetNodeValue(accelleration_tag, acc)
end
  
Origin = resiot_startfrom() --Scene process starts here

	if Origin == "Manual" then
		-- Manual script execution for testing
		
  		--TEST PAYLOAD
  		--Light: 5, Moisture: 20
  		-- X_value: 9.81, Y_value: 2.94, Z_value: -2.95, Total Accelleration: 2
  		-- Red: 100, Green: 200, Blue: 300, Clear 600
  		-- Temperature: 21.9, Humidity: 27
  		-- Latitude: 12.13, Longitude: -3.4, Altitude: 21
  		
		payload = "0514021bf551464ff94c6400c8002c0158024e6415007b1442419a9959c0"
	
		appeui = "70b3d57ed000fc4d"
		deveui = "8239323559379194"
	else
		-- Normal execution, get payload received from device
		appeui = resiot_comm_getparam("appeui")
		deveui = resiot_comm_getparam("deveui")
		payload, err = resiot_getlastpayload(appeui, deveui)
 		resiot_debug("SN_TEST_R Message Received
")
	end


parsePayload(appeui,deveui,payload)